import{ model, Schema, Types } from 'mongoose';
import bcrypt from 'bcrypt';
import { IUser, SALT_ROUNDS } from './../types/user.types';

const UserSchema = new Schema<IUser>({
  nik: { type: Number, required: true },
  shortNik: { type: String, required: true },
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  email: { type: String, required: true },
  password: { type: String, required: true },
  verifiedAt: { type: String, default: '' },
  userRoles: [{ type: Types.ObjectId, ref: 'Auth_Role' }],
  userAbilities: [{ type: Types.ObjectId, ref: 'Auth_Ability' }],
  avatar: { type: String, default: '' },
  isAdmin: { type: Boolean, default: false, required: true },
  isActive: { type: Boolean, default: true, required: true },
},{
  timestamps: true,
  collection: 'users'
});

UserSchema.pre('save', async function(next){
  const user = this;
  if(user.isModified('password')) {
    user.password = await bcrypt.hash(user.password, SALT_ROUNDS);
  }
  next()
})

export const UserModel = model<IUser>('User', UserSchema)